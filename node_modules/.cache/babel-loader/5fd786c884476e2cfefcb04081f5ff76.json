{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sandra\\\\Documents\\\\SIDE PROJECTS\\\\buystuff\\\\src\\\\context\\\\shopContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nconst ShopContext = React.createContext(); // Initializing a client to return content in the store's primary language\n\nconst client = Client.buildClient({\n  domain: 'buystuff.myshopify.com',\n  storefrontAccessToken: 'your-storefront-access-token'\n});\n\nclass ShopProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      product: {},\n      checkout: {},\n      isCartOpen: false\n    };\n\n    this.createCheckout = async () => {\n      const checkout = client.checkout.create();\n      localStorage.setItem('checkout', checkout);\n      await this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.fetchCheckout = async checkoutId => {\n      client.checkout.fetch(checkoutId).then(checkout => {\n        this.setState({\n          checkout: checkout\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.addItemToCart = async () => {\n      const lineItemstoAdd = [{\n        variantId,\n        quantity: parseInt(quantity, 10)\n      }];\n      const checkout = await client.checkout.addLineItems(this.state.checkout.id, lineItemsToAdd);\n      this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.fetchAllProducts = async () => {\n      const products = await client.product.fetchAll().then(products => {\n        console.log('Here be the stuff.', products);\n        this.setState({\n          products: products\n        });\n      });\n    };\n\n    this.fetchProductWithId = async () => {\n      const product = await client.product.fetch(id).then(product => {\n        console.log('Check this thing out.', product);\n        this.setState({\n          product: product\n        });\n      });\n    };\n\n    this.closeCart = () => {\n      this.setState({\n        isCartOpen: false\n      });\n    };\n\n    this.openCart = () => {\n      this.setState({\n        isCartOpen: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Check localstorage for saved checkout_id \n    // If no checkout_id, then create new checkout\n    // Else fetch checkout from Shopify\n    if (localStorage.checkout) {\n      this.fetchCheckout(localStorage.checkout);\n    } else {\n      this.createCheckout;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ShopContext.Provider, {\n      value: { ...this.state,\n        fetchAllProducts: this.fetchAllProducts,\n        fetchProductWithId: this.fetchProductWithId,\n        createCheckout: this.createCheckout,\n        addItemToCart: this.addItemToCart,\n        closeCart: this.closeCart,\n        openCart: this.openCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { ShopContext };\nexport default ShopProvider;","map":{"version":3,"sources":["C:/Users/Sandra/Documents/SIDE PROJECTS/buystuff/src/context/shopContext.js"],"names":["React","Component","Client","ShopContext","createContext","client","buildClient","domain","storefrontAccessToken","ShopProvider","state","products","product","checkout","isCartOpen","createCheckout","create","localStorage","setItem","setState","fetchCheckout","checkoutId","fetch","then","catch","err","console","log","addItemToCart","lineItemstoAdd","variantId","quantity","parseInt","addLineItems","id","lineItemsToAdd","fetchAllProducts","fetchAll","fetchProductWithId","closeCart","openCart","componentDidMount","render","props","children"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Client from 'shopify-buy';\r\n\r\n\r\nconst ShopContext = React.createContext()\r\n\r\n// Initializing a client to return content in the store's primary language\r\nconst client = Client.buildClient({\r\n    domain: 'buystuff.myshopify.com',\r\n    storefrontAccessToken: 'your-storefront-access-token'\r\n});\r\n  \r\n\r\nclass ShopProvider extends Component {\r\n    state = {\r\n        products: [],\r\n        product: {},\r\n        checkout: {},\r\n        isCartOpen: false,\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Check localstorage for saved checkout_id \r\n        // If no checkout_id, then create new checkout\r\n        // Else fetch checkout from Shopify\r\n        if(localStorage.checkout){\r\n            this.fetchCheckout(localStorage.checkout)\r\n        } else{\r\n            this.createCheckout\r\n        }\r\n    }\r\n\r\n    createCheckout = async () => {\r\n        const checkout = client.checkout.create()\r\n        localStorage.setItem('checkout', checkout)\r\n        await this.setState({ checkout: checkout })\r\n    }\r\n\r\n    fetchCheckout = async (checkoutId) => {\r\n        client.checkout.fetch(checkoutId)\r\n        .then( checkout => {\r\n            this.setState({ checkout: checkout })\r\n        })\r\n        .catch( err => console.log(err))\r\n    }\r\n\r\n    addItemToCart = async () => {\r\n        const lineItemstoAdd = [{\r\n            variantId,\r\n            quantity: parseInt(quantity, 10)\r\n        }];\r\n\r\n        const checkout = await client.checkout.addLineItems(this.state.checkout.id, lineItemsToAdd)\r\n        this.setState({ checkout: checkout })\r\n        \r\n    }\r\n\r\n    fetchAllProducts = async () => {\r\n        const products = await client.product.fetchAll()\r\n        .then( products => {\r\n            console.log('Here be the stuff.', products)\r\n            this.setState({ products: products })\r\n        })\r\n    }\r\n\r\n    fetchProductWithId = async () => {\r\n        const product = await client.product.fetch(id)\r\n        .then( product => {\r\n            console.log('Check this thing out.', product)\r\n            this.setState({ product: product })\r\n        })\r\n\r\n    }\r\n\r\n    closeCart = () => {\r\n        this.setState({isCartOpen: false})\r\n    }\r\n\r\n    openCart = () => {\r\n        this.setState({isCartOpen: true})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ShopContext.Provider value={{\r\n                ...this.state,\r\n                fetchAllProducts: this.fetchAllProducts,\r\n                fetchProductWithId: this.fetchProductWithId,\r\n                createCheckout: this.createCheckout,\r\n                addItemToCart: this.addItemToCart,\r\n                closeCart: this.closeCart,\r\n                openCart: this.openCart\r\n            }}>\r\n                {this.props.children}\r\n            </ShopContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport { ShopContext }\r\nexport default ShopProvider;"]},"metadata":{},"sourceType":"module"}