{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sandra\\\\Documents\\\\SIDE PROJECTS\\\\buystuff\\\\src\\\\context\\\\shopContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nimport DummyData from '../Data.json';\nconst ShopContext = React.createContext(); // Initializing a client to return content in the store's primary language\n\nconst client = Client.buildClient({\n  domain: 'cicisstuff.myshopify.com',\n  storefrontAccessToken: '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'\n});\n\nclass ShopProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      product: {},\n      checkout: {},\n      isCartOpen: false\n    };\n\n    this.createCheckout = async () => {\n      const checkout = await client.checkout.create();\n      localStorage.setItem('checkout', checkout.id);\n      await this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.fetchCheckout = async checkoutId => {\n      client.checkout.fetch(checkoutId).then(checkout => {\n        this.setState({\n          checkout: checkout\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.addItemToCart = async (variantId, quantity) => {\n      const lineItemstoAdd = [{\n        variantId,\n        quantity: parseInt(quantity, 10)\n      }];\n      const checkout = await client.checkout.addLineItems(this.state.checkout.id, lineItemstoAdd);\n      this.setState({\n        checkout: checkout\n      });\n      this.openCart();\n    };\n\n    this.fetchAllProducts = async () => {\n      // const products = await client.product.fetchAll()\n      this.setState({\n        products: DummyData\n      });\n    };\n\n    this.fetchProductWithId = async id => {\n      // const product = await client.product.fetch(id)\n      const products = DummyData; // const product = await DummyData.map(obj=> {\n      //     if(obj.id === id){ return obj}\n      // }) \n\n      this.setState({\n        product: products[0]\n      });\n    };\n\n    this.closeCart = () => {\n      this.setState({\n        isCartOpen: false\n      });\n      console.log('close cart');\n    };\n\n    this.openCart = () => {\n      this.setState({\n        isCartOpen: true\n      });\n      console.log('open cart');\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.checkout) {\n      this.fetchCheckout(localStorage.checkout);\n    } else {\n      this.createCheckout();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ShopContext.Provider, {\n      value: { ...this.state,\n        fetchAllProducts: this.fetchAllProducts,\n        fetchProductWithId: this.fetchProductWithId,\n        addItemToCart: this.addItemToCart,\n        closeCart: this.closeCart,\n        openCart: this.openCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ShopConsumer = ShopContext.Consumer;\nexport { ShopConsumer, ShopContext };\nexport default ShopProvider;","map":{"version":3,"sources":["C:/Users/Sandra/Documents/SIDE PROJECTS/buystuff/src/context/shopContext.js"],"names":["React","Component","Client","DummyData","ShopContext","createContext","client","buildClient","domain","storefrontAccessToken","ShopProvider","state","products","product","checkout","isCartOpen","createCheckout","create","localStorage","setItem","id","setState","fetchCheckout","checkoutId","fetch","then","catch","err","console","log","addItemToCart","variantId","quantity","lineItemstoAdd","parseInt","addLineItems","openCart","fetchAllProducts","fetchProductWithId","closeCart","componentDidMount","render","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Client from 'shopify-buy';\r\nimport DummyData from '../Data.json';\r\n\r\n\r\nconst ShopContext = React.createContext()\r\n\r\n// Initializing a client to return content in the store's primary language\r\nconst client = Client.buildClient({\r\n    domain: 'cicisstuff.myshopify.com',\r\n    storefrontAccessToken: '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'\r\n});\r\n  \r\n\r\nclass ShopProvider extends Component {\r\n    state = {\r\n        products: [],\r\n        product: {},\r\n        checkout: {},\r\n        isCartOpen: false,\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(localStorage.checkout){\r\n            this.fetchCheckout(localStorage.checkout)\r\n        } else{\r\n            this.createCheckout()\r\n        }\r\n    }\r\n\r\n    createCheckout = async () => {\r\n        const checkout = await client.checkout.create()\r\n        localStorage.setItem('checkout', checkout.id)\r\n        await this.setState({ checkout: checkout })\r\n    }\r\n\r\n    fetchCheckout = async (checkoutId) => {\r\n        client.checkout\r\n        .fetch(checkoutId)\r\n        .then( (checkout) => {\r\n            this.setState({ checkout: checkout })\r\n        })\r\n        .catch( err => console.log(err))\r\n    }\r\n\r\n    addItemToCart = async (variantId, quantity) => {\r\n        const lineItemstoAdd = [{\r\n            variantId,\r\n            quantity: parseInt(quantity, 10)\r\n        }];\r\n\r\n        const checkout = await client.checkout.addLineItems(\r\n            this.state.checkout.id, \r\n            lineItemstoAdd\r\n        );\r\n        this.setState({ checkout: checkout })\r\n        this.openCart()\r\n    }\r\n\r\n    fetchAllProducts = async () => {\r\n        // const products = await client.product.fetchAll()\r\n        this.setState({ products: DummyData })\r\n    }\r\n\r\n    fetchProductWithId = async (id) => {\r\n        // const product = await client.product.fetch(id)\r\n        const products = DummyData\r\n        // const product = await DummyData.map(obj=> {\r\n        //     if(obj.id === id){ return obj}\r\n        // }) \r\n        this.setState({ product: products[0] })\r\n    }\r\n\r\n    closeCart = () => {\r\n        this.setState({isCartOpen: false})\r\n        console.log('close cart')\r\n    }\r\n\r\n    openCart = () => {\r\n        this.setState({isCartOpen: true})\r\n        console.log('open cart')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ShopContext.Provider value={{\r\n                ...this.state,\r\n                fetchAllProducts: this.fetchAllProducts,\r\n                fetchProductWithId: this.fetchProductWithId,\r\n                addItemToCart: this.addItemToCart,\r\n                closeCart: this.closeCart,\r\n                openCart: this.openCart\r\n            }}>\r\n                {this.props.children}\r\n            </ShopContext.Provider>\r\n        )\r\n    }\r\n}\r\nconst ShopConsumer = ShopContext.Consumer;\r\nexport { ShopConsumer, ShopContext }\r\nexport default ShopProvider;"]},"metadata":{},"sourceType":"module"}